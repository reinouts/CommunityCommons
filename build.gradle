buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.0"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.3'
}

apply plugin: 'com.github.johnrengelman.plugin-shadow'
apply plugin: 'java'
apply plugin: 'distribution'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

import groovy.util.XmlParser
import groovy.xml.XmlUtil
import org.gradle.api.internal.file.copy.CopySpecInternal

project.ext {
    PACKAGEXML_TEMPLATE = '''<?xml version="1.0" encoding="utf-8" ?>
    <package xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.mendix.com/package/1.0/">
        <modelerProject xmlns="http://www.mendix.com/modelerProject/1.0/">
            <module name="''' + "${project.name}" + '''" />
            <projectFile path="project.mpr" />
            <files/>
        </modelerProject>
    </package>'''

    CC_VERSION = '7.2.0'
    MXBUILD_VERSION = '7.1.0'
}

group 'com.mendix.communitycommons'
version CC_VERSION

def runtimeLibs   = "$buildDir/runtime/bundles"
def userLibDir    = "$projectDir/src/CommunityCommons/userlib"
def javasourceDir = "$projectDir/src/CommunityCommons/javasource"

configurations {
    tar
}

repositories {
    mavenLocal()
    mavenCentral()
    ivy {
	url 'https://cdn.mendix.com/'
	layout 'pattern', {
	    artifact '/[organisation]/[module]-[revision].[ext]'
	}
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile fileTree(dir: "$runtimeLibs")
    compile group: 'org.owasp.antisamy', name: 'antisamy', version: '1.5.3'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.pdfbox', name: 'pdfbox-app', version: '2.0.8'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    runtime group: 'xalan', name: 'xalan', version: '2.7.2'
    compileOnly fileTree(dir: "$runtimeLibs")

    tar "runtime:mxbuild:${project.MXBUILD_VERSION}@tar.gz"
}

sourceSets { // might be redundant, src/main and src/test should be default
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/CommunityCommons/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
    }
}

task copyDependenciesToUserlib( type: Copy ) {
    dependsOn 'shadowJar'

    into userLibDir
    //    from configurations.runtime
    //    eachFile { fileCopyDetails ->
    //        def requiredLibFlag = new File( destinationDir, "${fileCopyDetails.name}.${project.name}.RequiredLib")
    //        requiredLibFlag.write ''
    //    }
    from "$buildDir/libs"
}

task copyJavasource( type: Copy ) {
    
    from 'src/main/java' 
    
    filter { line -> 
	line.replaceAll('org.apache', 'cc_org.apache')
	    .replaceAll('org.owasp', 'cc_org.owasp')
    }

    into javasourceDir     
}

task untarMxbuild( type: Copy ) {
    //TODO: don't re-download if bundles directory exists
    configurations.tar.findAll{it.name.endsWith('tar.gz')}.each {
        from tarTree(resources.gzip(it))
        into buildDir
        include('**/runtime/bundles/com.mendix.public-api.jar')
        include('**/runtime/bundles/com.mendix.logging-api.jar')
        include('**/runtime/bundles/biz.aQute.bnd.bndlib.jar')
        includeEmptyDirs = false
    }
}

distributions {
    main {
        baseName = 'CommunityCommons'
        contents {
            into('/') {
                from 'src/CommunityCommons'
                exclude('**/proxies/*')
                exclude('**/system/*')
            }
            into('/') {
                from 'package.xml'
            }
        }
    }
}

distZip {
    archiveName "$baseName-${project.CC_VERSION}" + ".mpk"
}


task fullDist {
    // TODO: Instead of zipping CommunityCommons.mpr we should extract the CC module as project.mpr and zip that instead!
    //    Work on that is done in branch 'readModuleFromMpr'
    dependsOn 'clean', 'copyDependenciesToUserlib', 'copyJavasource', 'untarMxbuild', 'packageXML', 'distZip'
}

clean {
    delete "$projectDir/src/CommunityCommons/userlib"
    delete "$projectDir/src/CommunityCommons/javasource"
    delete "$projectDir/package.xml"
}

task packageXML {
    ext.interpolateFileElementXML = { resource ->
        return "<file path=\"${resource}\" />"
    }

    ext.buildRelativePath = { fileEntry, directory ->
        return (fileEntry.absolutePath - directory.absolutePath).replace("/", "\\").substring(1)
    }

    ext.getResources = {
        def list = []
        def userLibDirectory = file(userLibDir)

        def distributionCopySpec = distributions.main.contents.buildRootResolver().allSource

        distributionCopySpec.each { f ->
            list << interpolateFileElementXML(
                buildRelativePath(f, file("$projectDir/src/CommunityCommons"))
            )
        }

        return list
    }

    doLast {
        def packageXMLResources = getResources()
        def packageXML = new XmlParser().parseText(project.PACKAGEXML_TEMPLATE)

        packageXMLResources.each { resource ->
            def resourceXML = new XmlParser().parseText(resource)
            packageXML.modelerProject.files[0].append(resourceXML)
        }

        String out = XmlUtil.serialize( packageXML )
        new File("$projectDir/package.xml").write(out)
    }

    tasks.distZip.shouldRunAfter tasks.packageXML
    tasks.packageXML.shouldRunAfter tasks.copyDependenciesToUserlib
    tasks.copyDependenciesToUserlib.shouldRunAfter tasks.untarMxbuild
    tasks.copyJavasource.shouldRunAfter tasks.copyDependenciesToUserlib
}

shadowJar {

    relocate('org.apache', 'cc_org.apache')
    relocate('org.bouncycastle', 'cc_org.bouncycastle')
    relocate('org.cyberneko', 'cc_org.cyberneko')
    relocate('org.owasp', 'cc_org.owasp')
    relocate('org.w3c', 'cc_org.w3c')
    relocate('org.xml', 'cc_org.xml')
    relocate('javax.xml', 'cc_javax.xml')

    dependencies {
        exclude 'com/mendix/**'
	exclude 'communitycommons/**'
	exclude 'myfirstmodule/**'
        exclude 'biz/aQute/**'
        exclude '**/proxies/**'
        exclude '**/system/**'
    }
    
    mergeServiceFiles()
}